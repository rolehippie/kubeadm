# Standards: 1.2
---
- name: Stat kubelet config
  register: kubeadm_config_file
  stat:
    path: /etc/kubernetes/kubelet.conf
  tags:
    - kubeadm

- name: Group join tasks
  when:
    - not kubeadm_config_file.stat.exists
  tags:
    - kubeadm
  block:
    - name: Create cert dirs
      when:
        - inventory_hostname in kubeadm_master_nodes
      loop:
        - /etc/kubernetes/pki
        - /etc/kubernetes/pki/etcd
      file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx
        state: directory
      tags:
        - kubeadm

    - name: Fetch kube certs
      when:
        - inventory_hostname in kubeadm_master_nodes
      loop:
        - ca.key
        - ca.crt
        - sa.key
        - sa.pub
        - front-proxy-ca.key
        - front-proxy-ca.crt
      register: kubeadm_kube_certs
      delegate_to: "{{ kubeadm_master_nodes | sort | first }}"
      run_once: True
      slurp:
        src: "/etc/kubernetes/pki/{{ item }}"
      tags:
        - kubeadm

    - name: Write kube certs
      when:
        - inventory_hostname in kubeadm_master_nodes
        - kubeadm_kube_certs is defined
      loop: "{{ kubeadm_kube_certs.results | default([]) }}"
      loop_control:
        label: "{{ item.item }}"
      copy:
        content: "{{ item.content | b64decode }}"
        dest: "{{ item.source }}"
        owner: root
        group: root
        mode: "{{ 'u=rw,g=,o=' if item.source.endswith('.key') else 'u=rw,g=r,o=r' }}"
      tags:
        - kubeadm

    - name: Fetch etcd certs
      when:
        - inventory_hostname in kubeadm_master_nodes
      loop:
        - ca.key
        - ca.crt
      register: kubeadm_etcd_certs
      delegate_to: "{{ kubeadm_master_nodes | sort | first }}"
      run_once: True
      slurp:
        src: "/etc/kubernetes/pki/etcd/{{ item }}"
      tags:
        - kubeadm

    - name: Write etcd certs
      when:
        - inventory_hostname in kubeadm_master_nodes
        - kubeadm_etcd_certs is defined
      loop: "{{ kubeadm_etcd_certs.results | default([]) }}"
      loop_control:
        label: "{{ item.item }}"
      copy:
        content: "{{ item.content | b64decode }}"
        dest: "{{ item.source }}"
        owner: root
        group: root
        mode: "{{ 'u=rw,g=,o=' if item.source.endswith('.key') else 'u=rw,g=r,o=r' }}"
      tags:
        - kubeadm

    - name: Write kubeadm config
      template:
        src: config.j2
        dest: /etc/kubernetes/kubeadm.conf
        owner: root
        group: root
        mode: u=rw,g=r,o=
      tags:
        - kubeadm

    - name: Join existing cluster
      command:
        cmd: kubeadm join --config /etc/kubernetes/kubeadm.conf
      tags:
        - kubeadm

...
